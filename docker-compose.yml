
services:
  nginx:
    image: nginx:latest
    container_name: TS_nginx
    ports:
      - "443:443"
    volumes:
      - /srv/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /srv/nginx/certs:/etc/nginx/certs:ro
      - /srv/nginx/logs:/var/log/nginx
      - /srv/uploads:/data/uploads:ro
    depends_on: 
      - nodejs
      - fastapi
    networks:
      - TS_net
    restart: always


  nodejs:
    build: ./nodejs
    container_name: TS_node
    env_file:
      - ./nodejs/.env
    networks:
      - TS_net
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s


  fastapi:
    build: ./fastapi
    container_name: TS_fastapi
    env_file:
      - ./fastapi/.env
    volumes:
      - /srv/uploads:/data/uploads
    depends_on:
      - postgres
    networks:
      - TS_net
    restart: always
    healthcheck:
      test: ["CMD", "python", "-c", "import http.client as h;c=h.HTTPConnection('localhost',3601,timeout=5);c.request('GET','/health');r=c.getresponse();exit(0 if r.status==200 else 1)"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s    


  postgres:
    image: postgres:15
    container_name: TS_postgres
    restart: always
    environment:
        POSTGRES_USER: TS_user
        POSTGRES_PASSWORD: TS_pass
        POSTGRES_DB: TS_db
    volumes:
        - /srv/postgres/data:/var/lib/postgresql/data
        #- /srv/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
        - TS_net
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U TS_user -d TS_db"]
        interval: 30s
        timeout: 5s
        retries: 5
        start_period: 20s    


networks:
  TS_net:        # 단일 네트워크만 사용
    driver: bridge
